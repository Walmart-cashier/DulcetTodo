!function(t){var n={};function e(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(i,o,function(n){return t[n]}.bind(null,o));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);const i=()=>{document.querySelector("#dynamicContent").innerHTML='<section class="navButtons">\n    <div>\n        <button><i class="im im-calendar"></i></button>\n        <button>Previous Day</button>\n    </div>\n    <div>\n        <button><i class="im im-calendar"></i></button>\n        <button>Next Day</button>\n    </div>\n    </section>\n    <section class="tasks">\n    <section class="task">\n        <div id="task">\n            <p>Workout</p>\n            <p><i class="im im-circle-o"></i>\n            </p>\n            <p>today 7pm</p>\n    \n        </div>\n        <button><i class="im im-x-mark"></i>\n        </button>\n    </section>\n    <section class="task">\n        <div id="task">\n            <p>homework</p>\n            <p><i class="im im-circle-o"></i>\n            </p>\n            <p>today 11pm</p>\n        </div id="task">\n        <button><i class="im im-x-mark"></i>\n        </button>\n    </section>\n    <section class="task">\n        <div>\n            <p>service bike</p>\n            <p><i class="im im-circle-o"></i>\n            </p>\n            <p>march 29th 10am</p>\n        </div>\n        <button><i class="im im-x-mark"></i>\n        </button>\n    </section>\n    </section>\n    <section class="uiButtons">\n    <button id="addButton"> <i class="im im-plus"></i></button>\n    <button>clear list</button>\n    </section>'},o=()=>{document.querySelector("#AddTaskBack").addEventListener("click",()=>{i(),c()})},r=()=>{document.querySelector("#addButton").addEventListener("click",()=>{(()=>{console.log("hi im generateaddtaskcontent function");document.querySelector("#dynamicContent").innerHTML=' <button id="AddTaskBack" class="backButton"><i class="im im-angle-left"></i></button>\n    \x3c!-- validation later --\x3e\n    <form>\n        <input type="text" placeholder="title" id="title">\n        <textarea placeholder="description" id="description" cols="30" rows="10"></textarea>\n        <label for="priority">Set a Priority</label>\n            <select  id="priority">\n                <option value="1">No Rush</option>\n                <option value="2">Hurry Up</option>\n                <option value="3">Very Urgent</option>\n            </select>\n            <br>\n            <br>\n        <label for="duedate">Enter a DueDate</label>\n        <input type="text" id="duedate" placeholder="March 23 11am">\n    </form>'})(),o()})},a=()=>{document.querySelectorAll("#task").forEach(t=>{t.addEventListener("click",()=>{document.querySelector("#dynamicContent").innerHTML='<button id="AddTaskBack" class="backButton"><i class="im im-angle-left"></i></button>\n    <section class="viewingTask">\n        <p>time written on</p>\n        <form>\n            <input type="text" placeholder="title" id="title" value="workout man">\n            \n            <textarea placeholder="description" id="description" cols="30" rows="10"></textarea>\n        </form>\n        <p ><span>priority :  </span>very urgent</p>\n        <p><span>due date :  </span>tomorow 5pm</p>\n    </section>',o()})})},c=()=>{r(),a()};window.addEventListener("load",()=>{i(),c()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2R5bmFtaWNIb21lUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FkZFRhc2tQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3VGFza1BhZ2UuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnZW5lcmF0ZUhvbWVwYWdlQ29udGVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImlubmVySFRNTCIsImJhY2tCdXR0b25FdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGRIb21lUGFnZUV2ZW50cyIsImFkZEJ1dHRvbkV2ZW50IiwiY29uc29sZSIsImxvZyIsImdlbmVyYXRlQWRkVGFza0NvbnRlbnQiLCJ2aWV3VGFza0J1dHRvbkV2ZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJpdGVtIiwid2luZG93Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLHNDQ2xGckQsTUFBTUMsRUFBMEIsS0FDTEMsU0FBU0MsY0FBYyxtQkFDL0JDLFVBQVksZ3lDQ2V6QkMsRUFBa0IsS0FDREgsU0FBU0MsY0FBYyxnQkFDL0JHLGlCQUFpQixRQUFTLEtBQ2pDTCxJQUNBTSxPQUdGQyxFQUFpQixLQUNETixTQUFTQyxjQUFjLGNBQy9CRyxpQkFBaUIsUUFBUyxLQzFCVCxNQUMzQkcsUUFBUUMsSUFBSSx5Q0FDV1IsU0FBU0MsY0FBYyxtQkFDL0JDLFVBQVkscXVCRHdCdkJPLEdBQ0FOLE9BR0ZPLEVBQXNCLEtBQ1ZWLFNBQVNXLGlCQUFpQixTQUNsQ0MsUUFBU0MsSUFDWEEsRUFBS1QsaUJBQWlCLFFBQVMsS0VqQ1pKLFNBQVNDLGNBQWMsbUJBQy9CQyxVQUFZLDJmRmtDbkJDLFNBTU5FLEVBQW9CLEtBQ3RCQyxJQUNBSSxLQUdKSSxPQUFPVixpQkFBaUIsT0FBUSxLQUM1QkwsSUFDQU0iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImNvbnN0IGdlbmVyYXRlSG9tZXBhZ2VDb250ZW50ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZHluYW1pY0NvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZHluYW1pY0NvbnRlbnQnKTtcclxuICAgIGR5bmFtaWNDb250ZW50LmlubmVySFRNTCA9IGA8c2VjdGlvbiBjbGFzcz1cIm5hdkJ1dHRvbnNcIj5cclxuICAgIDxkaXY+XHJcbiAgICAgICAgPGJ1dHRvbj48aSBjbGFzcz1cImltIGltLWNhbGVuZGFyXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24+UHJldmlvdXMgRGF5PC9idXR0b24+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXY+XHJcbiAgICAgICAgPGJ1dHRvbj48aSBjbGFzcz1cImltIGltLWNhbGVuZGFyXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24+TmV4dCBEYXk8L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG4gICAgPC9zZWN0aW9uPlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJ0YXNrc1wiPlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJ0YXNrXCI+XHJcbiAgICAgICAgPGRpdiBpZD1cInRhc2tcIj5cclxuICAgICAgICAgICAgPHA+V29ya291dDwvcD5cclxuICAgICAgICAgICAgPHA+PGkgY2xhc3M9XCJpbSBpbS1jaXJjbGUtb1wiPjwvaT5cclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8cD50b2RheSA3cG08L3A+XHJcbiAgICBcclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8YnV0dG9uPjxpIGNsYXNzPVwiaW0gaW0teC1tYXJrXCI+PC9pPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9zZWN0aW9uPlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJ0YXNrXCI+XHJcbiAgICAgICAgPGRpdiBpZD1cInRhc2tcIj5cclxuICAgICAgICAgICAgPHA+aG9tZXdvcms8L3A+XHJcbiAgICAgICAgICAgIDxwPjxpIGNsYXNzPVwiaW0gaW0tY2lyY2xlLW9cIj48L2k+XHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgPHA+dG9kYXkgMTFwbTwvcD5cclxuICAgICAgICA8L2RpdiBpZD1cInRhc2tcIj5cclxuICAgICAgICA8YnV0dG9uPjxpIGNsYXNzPVwiaW0gaW0teC1tYXJrXCI+PC9pPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9zZWN0aW9uPlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJ0YXNrXCI+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPHA+c2VydmljZSBiaWtlPC9wPlxyXG4gICAgICAgICAgICA8cD48aSBjbGFzcz1cImltIGltLWNpcmNsZS1vXCI+PC9pPlxyXG4gICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDxwPm1hcmNoIDI5dGggMTBhbTwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8YnV0dG9uPjxpIGNsYXNzPVwiaW0gaW0teC1tYXJrXCI+PC9pPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9zZWN0aW9uPlxyXG4gICAgPC9zZWN0aW9uPlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJ1aUJ1dHRvbnNcIj5cclxuICAgIDxidXR0b24gaWQ9XCJhZGRCdXR0b25cIj4gPGkgY2xhc3M9XCJpbSBpbS1wbHVzXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgPGJ1dHRvbj5jbGVhciBsaXN0PC9idXR0b24+XHJcbiAgICA8L3NlY3Rpb24+YDtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIGdlbmVyYXRlSG9tZXBhZ2VDb250ZW50XHJcbn0iLCIvLyBkYXRlZm5zIGxpYnJhcnlcclxuaW1wb3J0IHtcclxuICAgIGxpZ2h0Rm9ybWF0XHJcbn0gZnJvbSAnZGF0ZS1mbnMnXHJcbmltcG9ydCB7XHJcbiAgICBnZW5lcmF0ZUhvbWVwYWdlQ29udGVudFxyXG59IGZyb20gJy4vZHluYW1pY0hvbWVQYWdlLmpzJ1xyXG5pbXBvcnQge1xyXG4gICAgZ2VuZXJhdGVBZGRUYXNrQ29udGVudFxyXG59IGZyb20gJy4vYWRkVGFza1BhZ2UuanMnXHJcbmltcG9ydCB7XHJcbiAgICBnZW5lcmF0ZVZpZXdUYXNrcGFnZUNvbnRlbnRcclxufSBmcm9tICcuL3ZpZXdUYXNrUGFnZS5qcydcclxuLy8gdmFyIHJlc3VsdCA9IHBhcnNlKCcyMyBtYXJjaCA2YW0nLCAnZCBNTU1NIGhhJywgbmV3IERhdGUoKSk7XHJcbi8vIGNvbnNvbGUubG9nKHJlc3VsdCk7XHJcblxyXG4vLyBmdW5jdGlvbnMgZm9yIGFkZGluZyBldmVudHMgdG8gcmVzcGVjdGl2ZSBidXR0b25zXHJcbmNvbnN0IGJhY2tCdXR0b25FdmVudCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGJhY2tCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjQWRkVGFza0JhY2snKTtcclxuICAgIGJhY2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgZ2VuZXJhdGVIb21lcGFnZUNvbnRlbnQoKTtcclxuICAgICAgICBhZGRIb21lUGFnZUV2ZW50cygpO1xyXG4gICAgfSk7XHJcbn1cclxuY29uc3QgYWRkQnV0dG9uRXZlbnQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBhZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkQnV0dG9uJyk7XHJcbiAgICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgZ2VuZXJhdGVBZGRUYXNrQ29udGVudCgpO1xyXG4gICAgICAgIGJhY2tCdXR0b25FdmVudCgpO1xyXG4gICAgfSk7XHJcbn1cclxuY29uc3Qgdmlld1Rhc2tCdXR0b25FdmVudCA9ICgpID0+IHtcclxuICAgIGNvbnN0IHRhc2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3Rhc2snKTtcclxuICAgIHRhc2tzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBnZW5lcmF0ZVZpZXdUYXNrcGFnZUNvbnRlbnQoKTtcclxuICAgICAgICAgICAgYmFja0J1dHRvbkV2ZW50KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KVxyXG59XHJcblxyXG5cclxuY29uc3QgYWRkSG9tZVBhZ2VFdmVudHMgPSAoKSA9PiB7XHJcbiAgICBhZGRCdXR0b25FdmVudCgpO1xyXG4gICAgdmlld1Rhc2tCdXR0b25FdmVudCgpO1xyXG59XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAgIGdlbmVyYXRlSG9tZXBhZ2VDb250ZW50KCk7XHJcbiAgICBhZGRIb21lUGFnZUV2ZW50cygpO1xyXG59KTsiLCJjb25zdCBnZW5lcmF0ZUFkZFRhc2tDb250ZW50ID0gKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2hpIGltIGdlbmVyYXRlYWRkdGFza2NvbnRlbnQgZnVuY3Rpb24nKVxyXG4gICAgY29uc3QgZHluYW1pY0NvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZHluYW1pY0NvbnRlbnQnKTtcclxuICAgIGR5bmFtaWNDb250ZW50LmlubmVySFRNTCA9IGAgPGJ1dHRvbiBpZD1cIkFkZFRhc2tCYWNrXCIgY2xhc3M9XCJiYWNrQnV0dG9uXCI+PGkgY2xhc3M9XCJpbSBpbS1hbmdsZS1sZWZ0XCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgPCEtLSB2YWxpZGF0aW9uIGxhdGVyIC0tPlxyXG4gICAgPGZvcm0+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJ0aXRsZVwiIGlkPVwidGl0bGVcIj5cclxuICAgICAgICA8dGV4dGFyZWEgcGxhY2Vob2xkZXI9XCJkZXNjcmlwdGlvblwiIGlkPVwiZGVzY3JpcHRpb25cIiBjb2xzPVwiMzBcIiByb3dzPVwiMTBcIj48L3RleHRhcmVhPlxyXG4gICAgICAgIDxsYWJlbCBmb3I9XCJwcmlvcml0eVwiPlNldCBhIFByaW9yaXR5PC9sYWJlbD5cclxuICAgICAgICAgICAgPHNlbGVjdCAgaWQ9XCJwcmlvcml0eVwiPlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjFcIj5ObyBSdXNoPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMlwiPkh1cnJ5IFVwPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiM1wiPlZlcnkgVXJnZW50PC9vcHRpb24+XHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8YnI+XHJcbiAgICAgICAgICAgIDxicj5cclxuICAgICAgICA8bGFiZWwgZm9yPVwiZHVlZGF0ZVwiPkVudGVyIGEgRHVlRGF0ZTwvbGFiZWw+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJkdWVkYXRlXCIgcGxhY2Vob2xkZXI9XCJNYXJjaCAyMyAxMWFtXCI+XHJcbiAgICA8L2Zvcm0+YDtcclxuXHJcbn1cclxuZXhwb3J0IHtcclxuICAgIGdlbmVyYXRlQWRkVGFza0NvbnRlbnRcclxufSIsImNvbnN0IGdlbmVyYXRlVmlld1Rhc2twYWdlQ29udGVudCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGR5bmFtaWNDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2R5bmFtaWNDb250ZW50Jyk7XHJcbiAgICBkeW5hbWljQ29udGVudC5pbm5lckhUTUwgPSBgPGJ1dHRvbiBpZD1cIkFkZFRhc2tCYWNrXCIgY2xhc3M9XCJiYWNrQnV0dG9uXCI+PGkgY2xhc3M9XCJpbSBpbS1hbmdsZS1sZWZ0XCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJ2aWV3aW5nVGFza1wiPlxyXG4gICAgICAgIDxwPnRpbWUgd3JpdHRlbiBvbjwvcD5cclxuICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJ0aXRsZVwiIGlkPVwidGl0bGVcIiB2YWx1ZT1cIndvcmtvdXQgbWFuXCI+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8dGV4dGFyZWEgcGxhY2Vob2xkZXI9XCJkZXNjcmlwdGlvblwiIGlkPVwiZGVzY3JpcHRpb25cIiBjb2xzPVwiMzBcIiByb3dzPVwiMTBcIj48L3RleHRhcmVhPlxyXG4gICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8cCA+PHNwYW4+cHJpb3JpdHkgOiAgPC9zcGFuPnZlcnkgdXJnZW50PC9wPlxyXG4gICAgICAgIDxwPjxzcGFuPmR1ZSBkYXRlIDogIDwvc3Bhbj50b21vcm93IDVwbTwvcD5cclxuICAgIDwvc2VjdGlvbj5gO1xyXG59XHJcblxyXG5leHBvcnQge2dlbmVyYXRlVmlld1Rhc2twYWdlQ29udGVudH0iXSwic291cmNlUm9vdCI6IiJ9